name: Deploy a Single Environment

on :
  workflow_call:
    inputs:
      envId:
        description: 'The environment id (eg. dev, testing, prod)'
        required: true
        default: 'dev'
        type: string


# Necessary permissions for workflow
permissions:
  id-token: write
  contents: read

jobs:
    deploy_environment:
        name: Deploy Environment
        runs-on: ubuntu-latest
  
        steps:
            ## NOTE: We always checkout the main branch for this workflow.
            ## This is because the main branch is the source of truth for
            ## the environments.yaml file, which determines which branch to deploy to
            ## which environments. Other branches can trigger this workflow, but
            ## the main branch is always the source of truth.
            - name: Check out code
              uses: actions/checkout@v2
              with:
                ref: main
  
  
            - uses: mikefarah/yq@v4.44.3
              with:
                  cmd: yq -V
      
      
            - name: Read the account id of the Artifact account
              id: read_artifact_account_id
              run: |
                ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account/config.yaml)
                # Set the value as an output
                echo "::set-output name=artifact_account_id::$ARTIFACT_ACCOUNT_ID"
      
            # Assume the OIDC Role to get temporary credentials 
            - uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-region: us-east-1
                role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy
  
          
            - name: Get Release configuration
              id: get_release_config
              # Give an environment id (envId) we want to get the release configuration.
              # This includes the following:
                #   - target_ref: the git branch that should be deployed to this environment
                #   - release_infra_hash: the hash of the infra build artifact that should be deployed to this environment
                #   - client_image_tag: The tag of the client docker image that should be deployed.
                #   - server_image_tag: The tag of the server docker image that should be deployed.
                #   - environment_aws_account_id: the aws account id of the environment
              env:
                ARTIFACTS_STACK_NAME: 'artifact-account-setup'
                CF_DIR: 'cloudformation'
              run: |
                envId="${{ inputs.envId }}"
                ARTIFACTS_STACK_NAME='artifact-account-setup'

                  target_ref=$(yq e '.[] | select(.envId == "'$envId'")| .gitRefName' ./cd/environments.yaml)
                  domain_name=$(yq e '.[] | select(.envId == "'$envId'")| .domainName' ./cd/environments.yaml)
                  environment_aws_account_id=$(yq e '.[] | select(.envId == "'$envId'")| .awsAccountId' ./cd/environments.yaml)
                  release_infra_hash=$(aws ssm get-parameter --name "/build-artifact/infra/$target_ref" --query "Parameter.Value" --output text)
                  client_image_tag=$(aws ssm get-parameter --name "/build-artifact/client/$target_ref" --query "Parameter.Value" --output text)
                  server_image_tag=$(aws ssm get-parameter --name "/build-artifact/server/$target_ref" --query "Parameter.Value" --output text)
                  infra_bucket_name=$(aws cloudformation describe-stacks --stack-name "$ARTIFACTS_STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='InfraArtifactsBucket'].OutputValue" --output text )

                  echo aws ssm get-parameter --name "/build-artifact/infra/$target_ref" --query "Parameter.Value" --output text 
                  aws ssm get-parameter --name "/build-artifact/infra/$target_ref" --query "Parameter.Value" --output text

                    echo "target_ref=$target_ref" >> $GITHUB_OUTPUT
                    echo "domain_name=$domain_name" >> $GITHUB_OUTPUT
                    echo "environment_aws_account_id=$environment_aws_account_id" >> $GITHUB_OUTPUT
                    echo "release_infra_hash=$release_infra_hash" >> $GITHUB_OUTPUT
                      echo "client_image_tag=$client_image_tag" >> $GITHUB_OUTPUT
                      echo "server_image_tag=$server_image_tag" >> $GITHUB_OUTPUT
                      echo "infra_bucket_name=$infra_bucket_name" >> $GITHUB_OUTPUT


            # Assume the OIDC Role to get temporary credentials 
            - uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-region: us-east-1
                role-to-assume: arn:aws:iam::${{ steps.get_release_config.outputs.environment_aws_account_id }}:role/deploy
  
            - name: Apply Cloudformation Template
              run: |
                stack_name="deploy-env"
                cf_template_file=$(mktemp)
                s3_url="s3://${{ steps.get_release_config.outputs.infra_bucket_name }}/cloudformation/${{ steps.get_release_config.outputs.release_infra_hash }}/deploy_env.yaml"
                aws s3 cp "$s3_url" "$cf_template_file"


                echo "Deploying to account: ${{ steps.get_release_config.outputs.environment_aws_account_id }}"
                aws cloudformation deploy \
                  --template-file "$cf_template_file" \
                  --parameter-overrides \
                      EnvId="${{ inputs.envId }}" \
                      InfraArtifactsBucket="${{ steps.get_release_config.outputs.infra_bucket_name }}" \
                      InfraReleaseHash="${{ steps.get_release_config.outputs.release_infra_hash }}" \
                      ClientImageTag="${{ steps.get_release_config.outputs.client_image_tag }}" \
                      ServerImageTag="${{ steps.get_release_config.outputs.server_image_tag }}" \
                      ReleaseTarget="${{ steps.get_release_config.outputs.target_ref }}" \
                      DomainName="${{ steps.get_release_config.outputs.domain_name }}" \
                  --stack-name "$stack_name"  \
                  --no-fail-on-empty-changeset \
                  --capabilities CAPABILITY_NAMED_IAM

            

