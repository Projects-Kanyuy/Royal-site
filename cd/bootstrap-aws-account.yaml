Parameters:
  GitHubOrgUser:
    Description: Name of GitHub organization/user (case sensitive)
    Type: String
    Default: "Projects-Kanyuy"
  RepositoryName:
    Description: Name of GitHub repository (case sensitive)
    Type: String
  MainAccountId:
    Description: Main AWS Account ID that holds the IAM users allowed to assume role into this account
    Type: String
    Default: "362954627441"
  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Default: "sts.amazonaws.com"
    Type: String
Resources:
  
  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: deploy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated:
                - !Ref GithubOidc
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: !Ref OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrgUser}/${RepositoryName}:*
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${MainAccountId}:root"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
        - arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
  DeployRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [
          {"Effect":"Allow","Action":[
            "iam:GetRole",
            "iam:PassRole",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:AttachRolePolicy",
            "iam:DetachRolePolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:UpdateInstanceProfile",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:GetUser",
            "iam:TagUser",
            "iam:UntagUser",
            "iam:DeleteUserPolicy",
            "iam:CreateUser",
            "iam:PutUserPolicy",
            "iam:DeleteUser",
            "iam:ListAccessKeys",
            "iam:CreateAccessKey"
            ],"Resource": [
              { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/*"},
              { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"}
        ]},
          {"Effect":"Allow","Action":["iam:*"],"Resource": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/*"}},
          {"Effect":"Allow","Action":["*"],"Resource": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:group/*"}},
          {"Effect":"Allow","Action":["ecr:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ecs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["logs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["elasticloadbalancing:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["sns:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ec2:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ssm:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["sqs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["servicediscovery:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["autoscaling:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["s3:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ses:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["events:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["cloudformation:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["elasticfilesystem:*"],"Resource":"*"}
        ]

        
      Roles:
        - Ref: "DeployRole"
  
  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - ffffffffffffffffffffffffffffffffffffffff

## Dev Role
  DevRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dev
      AssumeRolePolicyDocument:
        Statement: 
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${MainAccountId}:root"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
        - arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
  DevRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [
          {"Effect":"Allow","Action":[
            "iam:GetRole",
            "iam:PassRole",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:DeleteUserPolicy",
            "iam:PutUserPolicy",
            "iam:DeleteUser",
            "iam:CreateAccessKey",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:AttachRolePolicy",
            "iam:DetachRolePolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:UpdateInstanceProfile",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:GetUser",
            "iam:CreateUser",
            "iam:ListAccessKeys",
            "iam:TagUser"
            ],"Resource": [
              { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/*"},
              { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"}
        ]},
          {"Effect":"Allow","Action":["iam:*"],"Resource": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/*"}},
          {"Effect":"Allow","Action":["*"],"Resource": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:group/*"}},
          {"Effect":"Allow","Action":["ecr:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ecs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["logs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["elasticloadbalancing:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["sns:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ec2:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ssm:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["sqs:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["servicediscovery:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["autoscaling:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["s3:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["rds:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ses:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["events:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["cloudformation:*"],"Resource":"*"},
          {"Effect":"Allow","Action":["ce:*"],"Resource":"*"},
          {"Effect":"Allow", "Action":["aws-portal:ViewBilling", "aws-portal:ViewUsage"], "Resource": "*"},
          {"Effect":"Allow","Action":["elasticfilesystem:*"],"Resource":"*"}

        ]

        
      Roles:
        - Ref: "DevRole"
  

## Admin Role
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: admin
      AssumeRolePolicyDocument:
        Statement: 
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${MainAccountId}:root"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

Outputs:
  Role:
    Value: !GetAtt DeployRole.Arn
